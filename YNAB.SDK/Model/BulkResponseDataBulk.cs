/*
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YNAB.SDK.Client.OpenAPIDateConverter;

namespace YNAB.SDK.Model
{
    /// <summary>
    /// BulkResponseDataBulk
    /// </summary>
    [DataContract(Name = "BulkResponse_data_bulk")]
    public partial class BulkResponseDataBulk : IEquatable<BulkResponseDataBulk>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkResponseDataBulk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BulkResponseDataBulk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkResponseDataBulk" /> class.
        /// </summary>
        /// <param name="transactionIds">The list of Transaction ids that were created. (required).</param>
        /// <param name="duplicateImportIds">If any Transactions were not created because they had an &#x60;import_id&#x60; matching a transaction already on the same account, the specified import_id(s) will be included in this list. (required).</param>
        public BulkResponseDataBulk(List<string> transactionIds = default(List<string>), List<string> duplicateImportIds = default(List<string>))
        {
            // to ensure "transactionIds" is required (not null)
            this.TransactionIds = transactionIds ?? throw new ArgumentNullException("transactionIds is a required property for BulkResponseDataBulk and cannot be null");
            // to ensure "duplicateImportIds" is required (not null)
            this.DuplicateImportIds = duplicateImportIds ?? throw new ArgumentNullException("duplicateImportIds is a required property for BulkResponseDataBulk and cannot be null");
        }

        /// <summary>
        /// The list of Transaction ids that were created.
        /// </summary>
        /// <value>The list of Transaction ids that were created.</value>
        [DataMember(Name = "transaction_ids", IsRequired = true, EmitDefaultValue = false)]
        public List<string> TransactionIds { get; set; }

        /// <summary>
        /// If any Transactions were not created because they had an &#x60;import_id&#x60; matching a transaction already on the same account, the specified import_id(s) will be included in this list.
        /// </summary>
        /// <value>If any Transactions were not created because they had an &#x60;import_id&#x60; matching a transaction already on the same account, the specified import_id(s) will be included in this list.</value>
        [DataMember(Name = "duplicate_import_ids", IsRequired = true, EmitDefaultValue = false)]
        public List<string> DuplicateImportIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BulkResponseDataBulk {\n");
            sb.Append("  TransactionIds: ").Append(TransactionIds).Append("\n");
            sb.Append("  DuplicateImportIds: ").Append(DuplicateImportIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BulkResponseDataBulk);
        }

        /// <summary>
        /// Returns true if BulkResponseDataBulk instances are equal
        /// </summary>
        /// <param name="input">Instance of BulkResponseDataBulk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BulkResponseDataBulk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransactionIds == input.TransactionIds ||
                    this.TransactionIds != null &&
                    input.TransactionIds != null &&
                    this.TransactionIds.SequenceEqual(input.TransactionIds)
                ) && 
                (
                    this.DuplicateImportIds == input.DuplicateImportIds ||
                    this.DuplicateImportIds != null &&
                    input.DuplicateImportIds != null &&
                    this.DuplicateImportIds.SequenceEqual(input.DuplicateImportIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionIds != null)
                    hashCode = hashCode * 59 + this.TransactionIds.GetHashCode();
                if (this.DuplicateImportIds != null)
                    hashCode = hashCode * 59 + this.DuplicateImportIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
