/*
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YNAB.SDK.Client.OpenAPIDateConverter;

namespace YNAB.SDK.Model
{
    /// <summary>
    /// PayeeLocation
    /// </summary>
    [DataContract(Name = "PayeeLocation")]
    public partial class PayeeLocation : IEquatable<PayeeLocation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayeeLocation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PayeeLocation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayeeLocation" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="payeeId">payeeId (required).</param>
        /// <param name="latitude">latitude (required).</param>
        /// <param name="longitude">longitude (required).</param>
        /// <param name="deleted">Whether or not the payee location has been deleted.  Deleted payee locations will only be included in delta requests. (required).</param>
        public PayeeLocation(Guid id = default(Guid), Guid payeeId = default(Guid), string latitude = default(string), string longitude = default(string), bool deleted = default(bool))
        {
            this.Id = id;
            this.PayeeId = payeeId;
            // to ensure "latitude" is required (not null)
            this.Latitude = latitude ?? throw new ArgumentNullException("latitude is a required property for PayeeLocation and cannot be null");
            // to ensure "longitude" is required (not null)
            this.Longitude = longitude ?? throw new ArgumentNullException("longitude is a required property for PayeeLocation and cannot be null");
            this.Deleted = deleted;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets PayeeId
        /// </summary>
        [DataMember(Name = "payee_id", IsRequired = true, EmitDefaultValue = false)]
        public Guid PayeeId { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name = "latitude", IsRequired = true, EmitDefaultValue = false)]
        public string Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name = "longitude", IsRequired = true, EmitDefaultValue = false)]
        public string Longitude { get; set; }

        /// <summary>
        /// Whether or not the payee location has been deleted.  Deleted payee locations will only be included in delta requests.
        /// </summary>
        /// <value>Whether or not the payee location has been deleted.  Deleted payee locations will only be included in delta requests.</value>
        [DataMember(Name = "deleted", IsRequired = true, EmitDefaultValue = true)]
        public bool Deleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayeeLocation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PayeeId: ").Append(PayeeId).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayeeLocation);
        }

        /// <summary>
        /// Returns true if PayeeLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of PayeeLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayeeLocation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PayeeId == input.PayeeId ||
                    (this.PayeeId != null &&
                    this.PayeeId.Equals(input.PayeeId))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    this.Deleted.Equals(input.Deleted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PayeeId != null)
                    hashCode = hashCode * 59 + this.PayeeId.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                hashCode = hashCode * 59 + this.Deleted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
